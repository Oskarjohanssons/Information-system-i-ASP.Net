// <auto-generated />
using System;
using Information_system_i_ASP.Net.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Information_system_i_ASP.Net.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Information_system_i_ASP.Net.Models.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<decimal>("BeloppIn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BeloppUt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CarReg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleEmployee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalBeloppIn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBeloppUt")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DriverID");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            DriverID = 1,
                            BeloppIn = 550.00m,
                            BeloppUt = 180.00m,
                            CarReg = "DHT567",
                            DriverName = "David Thompson",
                            NoteDate = new DateTime(2024, 10, 26, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7547),
                            NoteDescription = "Completed morning shift deliveries",
                            ResponsibleEmployee = "Chris Allen",
                            TotalBeloppIn = 550.00m,
                            TotalBeloppUt = 180.00m
                        },
                        new
                        {
                            DriverID = 2,
                            BeloppIn = 0.00m,
                            BeloppUt = 150.00m,
                            CarReg = "QWE234",
                            DriverName = "Nina Foster",
                            NoteDate = new DateTime(2024, 10, 25, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7594),
                            NoteDescription = "Routine vehicle check-up",
                            ResponsibleEmployee = "Logistics Admin",
                            TotalBeloppIn = 0.00m,
                            TotalBeloppUt = 150.00m
                        },
                        new
                        {
                            DriverID = 3,
                            BeloppIn = 430.00m,
                            BeloppUt = 160.00m,
                            CarReg = "TYU789",
                            DriverName = "Victor Garcia",
                            NoteDate = new DateTime(2024, 10, 24, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7598),
                            NoteDescription = "Delivered beverages",
                            ResponsibleEmployee = "Sara Lee",
                            TotalBeloppIn = 430.00m,
                            TotalBeloppUt = 160.00m
                        },
                        new
                        {
                            DriverID = 4,
                            BeloppIn = 620.00m,
                            BeloppUt = 210.00m,
                            CarReg = "GHJ456",
                            DriverName = "Charlotte Adams",
                            NoteDate = new DateTime(2024, 10, 23, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7601),
                            NoteDescription = "Nighttime courier service",
                            ResponsibleEmployee = "Patrick Hill",
                            TotalBeloppIn = 620.00m,
                            TotalBeloppUt = 210.00m
                        },
                        new
                        {
                            DriverID = 5,
                            BeloppIn = 750.00m,
                            BeloppUt = 320.00m,
                            CarReg = "BVC901",
                            DriverName = "Ethan Rivera",
                            NoteDate = new DateTime(2024, 10, 22, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7603),
                            NoteDescription = "Transported office supplies",
                            ResponsibleEmployee = "Nancy Green",
                            TotalBeloppIn = 750.00m,
                            TotalBeloppUt = 320.00m
                        },
                        new
                        {
                            DriverID = 6,
                            BeloppIn = 950.00m,
                            BeloppUt = 370.00m,
                            CarReg = "UJM123",
                            DriverName = "Isabella Roberts",
                            NoteDate = new DateTime(2024, 10, 21, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7607),
                            NoteDescription = "Delivered pharmaceuticals",
                            ResponsibleEmployee = "Mark Stevenson",
                            TotalBeloppIn = 950.00m,
                            TotalBeloppUt = 370.00m
                        },
                        new
                        {
                            DriverID = 7,
                            BeloppIn = 1150.00m,
                            BeloppUt = 450.00m,
                            CarReg = "LKJ234",
                            DriverName = "Jack Morgan",
                            NoteDate = new DateTime(2024, 10, 20, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7610),
                            NoteDescription = "Handled electronics delivery",
                            ResponsibleEmployee = "Laura Knight",
                            TotalBeloppIn = 1150.00m,
                            TotalBeloppUt = 450.00m
                        });
                });

            modelBuilder.Entity("Information_system_i_ASP.Net.Models.DriverEvent", b =>
                {
                    b.Property<int>("DriverEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverEventID"));

                    b.Property<decimal>("BeloppIn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BeloppUt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("NoteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DriverEventID");

                    b.HasIndex("DriverID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            DriverEventID = 1,
                            BeloppIn = 420.00m,
                            BeloppUt = 60.00m,
                            DriverID = 1,
                            NoteDate = new DateTime(2024, 10, 26, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7775),
                            NoteDescription = "Morning delivery completed"
                        },
                        new
                        {
                            DriverEventID = 2,
                            BeloppIn = 0.00m,
                            BeloppUt = 320.00m,
                            DriverID = 2,
                            NoteDate = new DateTime(2024, 10, 25, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7779),
                            NoteDescription = "Engine oil change"
                        },
                        new
                        {
                            DriverEventID = 3,
                            BeloppIn = 0.00m,
                            BeloppUt = 120.00m,
                            DriverID = 1,
                            NoteDate = new DateTime(2024, 10, 24, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7781),
                            NoteDescription = "Fuel refilled"
                        },
                        new
                        {
                            DriverEventID = 4,
                            BeloppIn = 440.00m,
                            BeloppUt = 70.00m,
                            DriverID = 3,
                            NoteDate = new DateTime(2024, 10, 23, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7783),
                            NoteDescription = "Beverages delivered"
                        },
                        new
                        {
                            DriverEventID = 5,
                            BeloppIn = 640.00m,
                            BeloppUt = 130.00m,
                            DriverID = 4,
                            NoteDate = new DateTime(2024, 10, 22, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7785),
                            NoteDescription = "Overnight delivery route"
                        },
                        new
                        {
                            DriverEventID = 6,
                            BeloppIn = 780.00m,
                            BeloppUt = 180.00m,
                            DriverID = 5,
                            NoteDate = new DateTime(2024, 10, 21, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7826),
                            NoteDescription = "Office supplies delivered"
                        },
                        new
                        {
                            DriverEventID = 7,
                            BeloppIn = 980.00m,
                            BeloppUt = 240.00m,
                            DriverID = 6,
                            NoteDate = new DateTime(2024, 10, 20, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7829),
                            NoteDescription = "Pharmaceuticals dispatched"
                        },
                        new
                        {
                            DriverEventID = 8,
                            BeloppIn = 1250.00m,
                            BeloppUt = 350.00m,
                            DriverID = 7,
                            NoteDate = new DateTime(2024, 10, 19, 16, 57, 43, 745, DateTimeKind.Local).AddTicks(7831),
                            NoteDescription = "High-end electronics delivered"
                        });
                });

            modelBuilder.Entity("Information_system_i_ASP.Net.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Information_system_i_ASP.Net.Models.DriverEvent", b =>
                {
                    b.HasOne("Information_system_i_ASP.Net.Models.Driver", "Driver")
                        .WithMany("Events")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Information_system_i_ASP.Net.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Information_system_i_ASP.Net.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Information_system_i_ASP.Net.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Information_system_i_ASP.Net.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Information_system_i_ASP.Net.Models.Driver", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
